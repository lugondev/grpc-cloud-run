// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
  owner,
  group_name
) VALUES (
  $1, $2
) RETURNING id, group_name, owner, status, deactivated, updated_at, created_at
`

type CreateGroupParams struct {
	Owner     string `json:"owner"`
	GroupName string `json:"group_name"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.Owner, arg.GroupName)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Owner,
		&i.Status,
		&i.Deactivated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateGroup = `-- name: DeactivateGroup :exec
UPDATE groups
SET status = $2
WHERE id = $1
RETURNING id, group_name, owner, status, deactivated, updated_at, created_at
`

type DeactivateGroupParams struct {
	ID     int64 `json:"id"`
	Status bool  `json:"status"`
}

func (q *Queries) DeactivateGroup(ctx context.Context, arg DeactivateGroupParams) error {
	_, err := q.db.ExecContext(ctx, deactivateGroup, arg.ID, arg.Status)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, group_name, owner, status, deactivated, updated_at, created_at FROM groups
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Owner,
		&i.Status,
		&i.Deactivated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupForUpdate = `-- name: GetGroupForUpdate :one
SELECT id, group_name, owner, status, deactivated, updated_at, created_at FROM groups
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetGroupForUpdate(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupForUpdate, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Owner,
		&i.Status,
		&i.Deactivated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, group_name, owner, status, deactivated, updated_at, created_at FROM groups
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListGroupsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.Owner,
			&i.Status,
			&i.Deactivated,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups
SET group_name = $2
WHERE id = $1
RETURNING id, group_name, owner, status, deactivated, updated_at, created_at
`

type UpdateGroupParams struct {
	ID        int64  `json:"id"`
	GroupName string `json:"group_name"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, updateGroup, arg.ID, arg.GroupName)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupName,
		&i.Owner,
		&i.Status,
		&i.Deactivated,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
